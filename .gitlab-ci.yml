image: python:3.8

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

  # Enable buildkit
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"

  # Get submodules
  GIT_SUBMODULE_STRATEGY: recursive

test:
  stage: test
  services:
    - docker:20.10.5-dind
  before_script:
    - curl -Lo /tmp/docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-20.10.5.tgz && tar -xf /tmp/docker.tgz -C /usr/local && rm /tmp/docker.tgz && export PATH=/usr/local/docker:$PATH
    - docker info
    - curl -Lo /usr/local/bin/docker-compose "https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)"
    - chmod +x /usr/local/bin/docker-compose
    # Important note about this: the Docker server is on a separate host,
    # so exposed ports are at 'docker' not 'localhost', and
    # Docker containers can't reach the local runner!
  script:
    - diff -u lib_core/datamart_core/types.py lib_profiler/datamart_profiler/types.py
    - diff -u lib_core/datamart_core/types.py lib_materialize/datamart_materialize/types.py

    # Set up environment for testing
    - cp tests/ci.env .env
    - . scripts/load_env.sh
    - export DATAMART_VERSION=v0.0
    - "sed -i 's/# CI: //' docker-compose.yml Dockerfile"
    - "sed -i '/# NOTCI$/d' docker-compose.yml Dockerfile"
    - "sed -i 's/127\\.0\\.0\\.1:\\([0-9]\\+\\):\\([0-9]\\+\\)/\\1:\\2/' docker-compose.yml"
    - mkdir cov
    - chown 998 cov

    # Build image, using the GitLab registry as a cache
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - |
      export AUCTUS_IMAGE=$CI_REGISTRY_IMAGE/ci
      # Pull/update the image
      chmod 644 poetry.lock docker/install_deps.py
      touch -t 200001010000.00 poetry.lock docker/install_deps.py
      docker build -t auctus . \
        --cache-from=$AUCTUS_IMAGE \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --build-arg version=$DATAMART_VERSION
      # Push the updated image to the registry (might be no-op)
      docker tag auctus $AUCTUS_IMAGE
      docker push $AUCTUS_IMAGE

    # Pull image not to be built
    - docker-compose pull rabbitmq

    # Bring services up
    - scripts/setup.sh
    - docker-compose up -d elasticsearch rabbitmq redis minio
    - |
      # Wait for Elasticsearch to come up
      slept=0; while [ $(curl -s -o /dev/null -w "%{http_code}" http://docker:8020/) != 200 ]; do
        if [ $slept -gt 120 ]; then
          echo "Elasticsearch didn't come up after ${slept}s"
          exit 1
        fi
        sleep 5; slept=$((slept + 5))
      done
      echo "Elasticsearch came up after ${slept}s"
    - docker-compose up -d cache-cleaner coordinator lazo
    - sleep 10
    - docker-compose up -d profiler apiserver apilb test-discoverer
    - |
      # Wait for profiling to end
      slept=30
      sleep 30
      while [ "$(curl -s http://docker:8012/metrics | sed -n '/^rabbitmq_queue_messages{.*queue="profile".* \([0-9]*\)$/s//\1/p')" != 0 ]; do
        sleep 5
        slept=$((slept + 5))
        if [ $slept -gt 240 ]; then
          echo "Profiling didn't end after ${slept}s"
          docker-compose logs profiler
          exit 1
        fi
      done
      echo "Profiling ended after ${slept}s"
    - docker-compose ps
    - docker-compose logs profiler

    # Run the tests in a container
    - |
      # Run tests
        if ! docker run --env-file tests/ci.env -v $(pwd)/tests:/usr/src/app/tests -v $(pwd)/docs:/usr/src/app/docs -v $(pwd)/cov:/cov -e COVERAGE_FILE=/cov/testsuite --network auctus_default $AUCTUS_IMAGE python -Wd -m coverage run --branch tests/__main__.py; then docker-compose logs apiserver; docker-compose logs lazo; exit 1; fi
    - docker-compose logs apiserver
    - docker-compose logs lazo

  #  # Generate coverage report
  #  - docker-compose down -t 30
  #  - ls -lA cov/
  #  - cp docker/coveragerc .coveragerc
  #  - coverage combine -a cov/
  #  - coverage html --show-contexts
  #artifacts:
  #  paths:
  #    - htmlcov
  #  expire_in: 1 week
